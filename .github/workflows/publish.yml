# Mostly based on https://github.com/EmbarkStudios/cargo-about/blob/main/.github/workflows/rust-ci.yml
on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

name: publish
jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          submodules: "recursive"

      - name: Generate build-info.h
        run: |
          cd rs-llama-cpp-wrapper/llama.cpp
          mkdir -p build
          cd build
          cmake ..
          cd ../../..

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@master

      - run: rustup component add rustfmt
      - name: check rustfmt
        run: cargo fmt -- --check --color always

      - run: rustup component add clippy
      - run: cargo fetch
      - name: cargo clippy
        run: cargo clippy --all-targets -- -D warnings

  create-tag:
    name: create-tag
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Get Tags
        run: git fetch --tags origin
      - name: Setup Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local pull.rebase true

          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - uses: Swatinem/rust-cache@master
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo install cargo-get

      - name: Create tag if not exists
        id: create-tag
        run: |
          set -ex
          PKG_VERSION=$(cargo get version)
          TAG="v${PKG_VERSION}"
          if git rev-parse "${TAG}" >/dev/null 2>&1; then
            echo "Tag ${TAG} already exists"
            echo "tag-created=0" >> $GITHUB_OUTPUT
          else
            git tag "${TAG}"
            git push origin "${TAG}"
            echo "tag-created=1" >> $GITHUB_OUTPUT
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
          fi
    outputs:
      tag-created: ${{ steps.create-tag.outputs.tag-created }}
      tag: ${{ steps.create-tag.outputs.tag }}

  release:
    name: release
    needs: [create-tag]
    if: needs.create-tag.outputs.tag-created == '1'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          #- os: ubuntu-latest
          #  target: aarch64-unknown-linux-musl
          #  container: ghcr.io/cross-rs/aarch64-unknown-linux-musl:edge
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get install -y musl-tools

      - uses: actions/checkout@main
        with:
          submodules: "recursive"

      - name: Generate build-info.h
        run: |
          cd rs-llama-cpp-wrapper/llama.cpp
          mkdir build
          cd build
          cmake ..
          cd ../../..

      - name: Cargo Fetch
        run: cargo fetch --target ${{ matrix.target }}
      - name: Release Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Release
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cargo Publish Verify
        run: cargo publish --dry-run --no-verify --allow-dirty --all-features --target ${{ matrix.target }}
      - name: Cargo Publish
        if: matrix.target == 'aarch64-apple-darwin'
        run: cargo publish --allow-dirty --no-verify --all-features
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
